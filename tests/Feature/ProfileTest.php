<?php

namespace Tests\Feature;


use App\User;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ProfileTest extends TestCase
{
    use RefreshDatabase;
    private $user;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create([
            'password' => Hash::make('12345678'),
//            'email_verified_at' => now()
        ]);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testRedirectionUserToHisProfile()
    {

        $response = $this
            ->actingAs($this->user)
            ->get('/');
        $response->assertRedirect(route('profile',['id'=>$this->user->id]));
    }
    public function testIfProfilePageGetAllNecessaryData(){

        $response = $this
            ->actingAs($this->user)
            ->get(route('profile',['id'=>$this->user->id]));
        $response->assertViewHas([
            'user',
            'comments' ,
            'isFriend' ,
            'authUser' ,
            'isSentRequest' ,
            'friends' ,
            'gamesSubscriptions',
            'communities'
        ]);
        $response->assertOk();
    }
    public function testUpdate(){
//        $this->withoutMiddleware();
        $oldData = $this->user;
        $newData = [
            'name' => 'Vitalik',
            'surname' => 'Sokil',
            'nickname' => 'carrycon',
            'about' => 'something about me',
            'password' => '12345678',
        ];
        $response = $this
            ->actingAs($this->user)
            ->put('/edit', $newData);
        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect(route('edit'))
            ->assertSessionHas('success');

        $user = User::find($oldData->id);
        $oldData = [
            'name' => $user->name,
            'surname' => $user->surname,
            'nickname' => $user->nickname,
            'about' =>  $user->about,
        ];
        unset($newData['password']);
        $this->assertEquals($newData, $oldData);
    }

    public function testUpdateEmail(){
        $oldEmail = $this->user->email;
        $data = [
            'email'=>'testemail@gmail.com',
            'password'=>'12345678'
        ];
        $response = $this->actingAs($this->user)
        ->put(route('updateEmail'),$data);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect(route('verification.resend'));
        $this->assertEquals($data['email'],$this->user->email);
    }
    public function testUpdatePassword(){
        $data = [
            'currentPassword'=>'12345678',
            'password'=>'12345678910',
            'password_confirmation'=>'12345678910'
        ];
        $response = $this->actingAs($this->user)
        ->put(route('updatePassword'),$data);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect(route('editPassword'));
        $this->assertTrue(Hash::check($data['password'], $this->user->password));
    }


    public function testUpdateSettings(){
        $data = [
            'wall_can_edit'=>2,
            'show_email'=>1,
            'message_can_send'=>2
        ];
        $response = $this->actingAs($this->user)
            ->put(route('settings'),$data);
        $response
            ->assertSessionHasNoErrors()
            ->assertSessionHas('success');
        $this->assertEquals($data,[
            'wall_can_edit'=>$this->user->wall_can_edit,
            'show_email'=>$this->user->show_email,
            'message_can_send'=>$this->user->message_can_send
        ]);
    }

}
