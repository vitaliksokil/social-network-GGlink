<?php

namespace Tests\Feature;

use App\FriendShip;
use App\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class FriendShipControllerTest extends TestCase
{
    use RefreshDatabase;
    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();

    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testIndex()
    {
        $response = $this->actingAs($this->user)
        ->get(route('friendsAll'));

        $response->assertStatus(200)
            ->assertViewHas(['friends','user'])
            ->assertViewIs('pages.friends.friendsAll');

    }
    public function testFriendsById(){
        $newUser = factory(User::class)->create();
        $response = $this->actingAs($this->user)
            ->get(route('friendsById',['id'=>$newUser->id]));

        $response->assertStatus(200)
            ->assertViewHas(['friends','user'])
            ->assertViewIs('pages.friends.friendsAll');
    }

    public function testFriendsOnline(){
        $response = $this->actingAs($this->user)
            ->get(route('friendsOnline'));

        $response->assertStatus(200)
            ->assertViewHas(['onlineFriends','user'])
            ->assertViewIs('pages.friends.friendsOnline');
    }

    public function testFriendAccept(){
        $user1 = factory(User::class)->create();
        $user2 = factory(User::class)->create();

        $currentFriendship = FriendShip::create([
            'sender_id' => $user1->id,
            'receiver_id' => $user2->id,
        ]);
        $response = $this->actingAs($user1)
            ->put(route('friendAccept'),[
                'sender_id' =>$user1->id,
                'receiver_id' =>$user2->id,
            ]);


        $response
        ->assertSessionHas('success');
        $this->assertTrue($user1->isFriend($user2->id));
    }

    public function testDeleteFriend(){
        $user1 = factory(User::class)->create();
        $user2 = factory(User::class)->create();

        $currentFriendShip = FriendShip::create([
            'sender_id' => $user1->id,
            'receiver_id' => $user2->id,
        ]);

        $response = $this->actingAs($user1)
            ->delete(route('deleteFriend',['id' => $user2->id]));

        $response->assertSessionHas('success');
        $this->assertFalse($user1->isFriend($user2->id));
        $this->assertDatabaseMissing('friend_ships',['id' => $currentFriendShip->id]);
    }
}
